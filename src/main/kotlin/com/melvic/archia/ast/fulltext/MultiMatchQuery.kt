package com.melvic.archia.ast.fulltext

import com.melvic.archia.ast.*
import kotlin.reflect.KProperty

class MultiMatchQuery : Clause() {
    var query: String by parameters
    var type: MultiMatchType by parameters
    var fields: List<String> by parameters
    var tieBreaker: Double by parameters

    // best fields, most fields, phrase & prefix, cross fields, bool prefix
    var analyzer: Analyzer by parameters
    var boost: Boost by parameters
    var lenient: Boolean by parameters
    var zeroTermsQuery: ZeroTermsQuery by parameters

    // best fields, most fields, phrase & prefix, bool prefix
    var fuzziness: Fuzziness by parameters
    var maxExpansions: Int by parameters

    // best fields, most fields, cross fields, bool prefix
    var operator: Operator by parameters
    var minimumShouldMatch: MinimumShouldMatch by parameters

    // best fields, most fields, cross fields
    var cutoffFrequency: Double by parameters

    // best fields, most fields, bool prefix
    var prefixLength: Int by parameters
    var rewrite: Rewrite by parameters

    // best fields, bool prefix
    var autoGeneratedSynonymsPhraseQuery: Boolean by parameters
    var fuzzyTranspositions: Boolean by parameters

    // phrase & prefix
    var slop: Int by parameters

    override val requiredParams: List<KProperty<Any>>
        get() = listOf(::query)
}

enum class MultiMatchType {
    BEST_FIELDS, MOST_FIELDS, CROSS_FIELDS, PHRASE, PHRASE_PREFIX, BOOL_PREFIX
}