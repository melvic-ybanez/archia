package com.melvic.archia.interpreter

import com.melvic.archia.ast.*
import com.melvic.archia.ast.leaf.*
import com.melvic.archia.output.JsonNull
import com.melvic.archia.output.JsonObject
import com.melvic.archia.output.json
import kotlin.reflect.KCallable

fun TermQuery.interpret(parent: JsonObject): Evaluation {
    val field = this.field ?: return missingField(this::field)
    if (field.value == null) return missingField(field::value)

    val termFieldOut = json {
        customProp?.let {
            it.first to it.second.json()
        } ?: field.name to json {
            prop(field::value) { it.json() }
            prop(field::boost) { it.json() }
        }
    }

    val termOut = parent { esName() to termFieldOut }
    return termOut.success()
}

fun MatchQuery.interpret(parent: JsonObject): Evaluation {
    return interpret(parent) inner@ {
        if (query == null) return@inner json {
            error(missingFieldCode(::query))
        }

        json {
            prop(::query) {
                when (it) {
                    is AString -> it.value.json()
                    is ANumber -> it.value.json()
                    is ABoolean -> it.value.json()
                    is ADate -> it.value.toString().json()
                    else -> JsonNull
                }
            }
            prop(::analyzer) { it.json() }
            prop(::autoGeneratedSynonymsPhraseQuery) { it.json() }
            prop(::fuzziness) { it.interpret(this) }
            prop(::maxExpansions) { it.json() }
            prop(::prefixLength) { it.json() }
            prop(::transpositions) { it.json() }
            propEnum(::fuzzyRewrite)
            prop(::lenient) { it.json() }
            propEnum(::operator)
            prop(::minimumShouldMatch) { it.interpret(this) }
            propEnum(::zeroTermsQuery)
        }
    }
}

fun MatchAllQuery.interpret(parent: JsonObject): Evaluation {
    return parent {
        esName() to json { prop(::boost) { it.json() } }
    }.success()
}

fun MatchNoneQuery.interpret(parent: JsonObject): Evaluation {
    return parent { esName() to json {} }.success()
}

fun RangeQuery.interpret(parent: JsonObject): Evaluation {
    return interpret(parent) {
        json {
            fun <R, C : KCallable<R>> propFieldParam(callable: C) {
                prop(callable) {
                    when (it) {
                        is ANumber -> it.value.json()
                        is DateFormat -> it.lowerName().json()
                        else -> JsonNull
                    }
                }
            }
            propFieldParam(::gt)
            propFieldParam(::gte)
            propFieldParam(::lt)
            propFieldParam(::lte)

            propEnum(::format)
            propEnum(::relation)
            prop(::timeZone) { it.json() }
            prop(::boost) { it.json() }
        }
    }
}