package com.melvic.archia.interpreter

import com.melvic.archia.*
import com.melvic.archia.compound.BoolQuery
import com.melvic.archia.leaf.*
import com.melvic.archia.output.JsonObject
import com.melvic.archia.output.JsonValue
import com.melvic.archia.output.json

typealias Evaluation = Result<JsonValue>

fun Query.interpret(): Evaluation {
    fun interpret(query: Clause, parent: JsonValue): Evaluation {
        val objectOrEmpty = if (parent is JsonObject) parent else json {}

        return when (query) {
            is Term -> query.interpret(objectOrEmpty)
            is Match -> query.interpret(objectOrEmpty)
            else -> json {}.success()
        }
    }

    val output = this.queryClause?.let {
        var result: Evaluation = json {}.success()

        for (child in it.children) {
            if (result is Failed) break
            result = interpret(child, result.value())
        }

        result
    } ?: return missingField(this::query).fail()

    return when (output) {
        is Failed -> output
        is Success<*> -> json {
            "query" to output.value()
        }.success()
    }
}

fun Term.interpret(parent: JsonObject): Evaluation {
    val field = this.field ?: return missingField(this::field).fail()
    if (field.value == null) return missingField(field::value).fail()

    val termFieldOut = json {
        prop(field::value) { text(it) }
        prop(field::boost) { num(it) }
    }

    val termOut = parent { "term" to json { field.name to termFieldOut } }
    return termOut.success()
}

fun Match.interpret(parent: JsonObject): Evaluation {
    val field = this.field ?: return missingField(this::field).fail()
    if (field.query == null) return missingField(field::query).fail()

    val matchFieldOut = with(field) {
        json {
            prop(::query) {
                when (it) {
                    is AString -> text(it.value)
                    is ANumber -> num(it.value)
                    is ABoolean -> bool(it.value)
                    is ADate -> text(it.value.toString())
                    else -> die("Invalid query value")
                }
            }
            prop(::analyzer) { text(it) }
            prop(::autoGeneratedSynonymsPhraseQuery) { bool(it) }
            prop(::fuzziness) {
                when (it) {
                    is Fuzziness._0 -> num(0)
                    is Fuzziness._1 -> num(1)
                    is Fuzziness._2 -> num(2)
                    is Fuzziness.Auto -> it.distances?.let { distances ->
                        val (low, high) = distances
                        text("AUTO:[$low],[$high]")
                    } ?: text("AUTO")
                }
            }
            prop(::maxExpansions) { num(it) }
            prop(::prefixLength) { num(it) }
            prop(::transpositions) { bool(it) }
            prop(::fuzzyRewrite) { text(it.lowerName()) }
            prop(::lenient) { bool(it) }
            prop(::operator) { text(it.lowerName()) }
            prop(::minimumShouldMatch) {
                fun interpretSimple(it: SimpleMSM): JsonValue = when (it) {
                    is ANumber -> num(it.value)
                    is Percent -> text("${it.value}%")
                    else -> die("Unrecognized simple match type")
                }
                fun interpretMin(it: MinimumShouldMatch): JsonValue = when (it) {
                    is SimpleMSM -> interpretSimple(it)
                    is Combination -> text("${it.value}<${interpretSimple(it.simple)}")
                    is Multiple -> array(it.values.map { i -> interpretMin(i) })
                    else -> die("Unrecognized match type")
                }
                interpretMin(it)
            }
            prop(::zeroTermsQuery) { text(it.lowerName()) }
        }
    }

    val matchOut = parent { "match" to json { field.name to matchFieldOut } }
    return matchOut.success()
}